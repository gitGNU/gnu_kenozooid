#!/usr/bin/python

#
# Kenozooid - software stack to support different capabilities of dive
# computers.
#
# Copyright (C) 2009 by Artur Wroblewski <wrobell@pld-linux.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import logging
import optparse
import sys

usage = """
    %prog [options] list
    %prog [options] scan
    %prog [options] simulate <dev id> <dive plan>
    %prog [options] dump <dev id> <filename>

Commands Description:
    list - list available drivers and their capabilities
    scan - scan for and display attached devices
    simulate - simulate dive
    dump - dump dive computer memory (logbook, settings, etc.)
"""

parser = optparse.OptionParser(usage=usage)
parser.add_option('-v', '--verbose',
        action='store_true', dest='verbose', default=False,
        help='explain what is being done')

group = optparse.OptionGroup(parser, 'Dive Simulation Options')
group.add_option('--no-start',
        action='store_false',
        dest='sim_start',
        default=True,
        help='assume simulation is started, don\'t start simulation')
group.add_option('--no-stop',
        action='store_false',
        dest='sim_stop',
        default=True,
        help='don\'t stop simulation, leave dive computer in simulation mode')
parser.add_option_group(group)

options, args = parser.parse_args()

# configure basic logger
logging.basicConfig()
logging.Logger.manager.loggerDict.clear()
log = logging.getLogger()
log.setLevel(logging.INFO)

if options.verbose:
    logging.root.setLevel(logging.DEBUG)

# don't import kenozooid modules until logger is configured
import kenozooid.cli as cli

# import modules implementing supported drivers
# todo: support dynamic import of third party drivers
import kenozooid.driver.ostc
import kenozooid.driver.dummy

if len(args) < 1 or args[0] not in cli.COMMANDS:
    parser.print_help()
    sys.exit(1)

cmd = args[0]
assert cmd in cli.COMMANDS

cli.COMMANDS[cmd](parser, options, args)

