#!/usr/bin/python

#
# Kenozooid - software stack to support different capabilities of dive
# computers.
#
# Copyright (C) 2009 by Artur Wroblewski <wrobell@pld-linux.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

from kenozooid.simulation import simulate
import kenozooid.driver.ostc
import kenozooid.driver.dummy
from kenozooid.iface import query, params, DeviceDriver, Simulator

import optparse
import sys

commands = ('list', 'scan', 'simulate')

usage = """
    %prog [options] list
    %prog [options] scan
    %prog [options] simulate <dev> <divespec>

Commands description:
    list - list available drivers and their capabilities
    scan - scan for and display attached devices
    simulate - simulate dive with dive specification using device
"""

parser = optparse.OptionParser(usage=usage)
options, args = parser.parse_args()

if len(args) < 1 or args[0] not in commands:
    parser.print_help()
    sys.exit(1)

cmd = args[0]

if cmd == 'list':
    drivers = query(DeviceDriver)
    print 'Available drivers:\n'
    for cls in drivers:
        p = params(cls)
        id = p['id']
        name = p['name']
        drivers = query(id=id)

        # find capabilities
        caps = []
        if len(tuple(query(Simulator, id=id))) > 0:
            caps.append('simulation')
        #if len(tuple(query(DiveLog, id=id))) > 0:
        #    caps.append('divelog')
        # ... etc ...

        print '%s (%s): %s' % (id, name, ', '.join(caps))

elif cmd == 'scan':
    print 'Scanning...'
    for cls in query(DeviceDriver):
        print cls
        for drv in cls.scan():
            p = params(cls)
            id = p['id']
            name = p['name']
            print 'Found %s (%s): %s' % (id, name, drv.version())


elif cmd == 'simulate':
    if len(args) != 3:
        parser.print_help()
        sys.exit(2)

    id = args[1]
    spec = args[2]

    try:
        cls = query(DeviceDriver, id=id).next()
        drv = cls.scan().next()
    except StopIteration, ex:
        print 'Cannot find device driver for id %s' % id
        sys.exit(3)

    try:
        cls = query(Simulator, id=id).next()
        sim = cls(drv)
    except StopIteration, ex:
        print 'Device driver %s does not support simulation' % id
        sys.exit(3)

    simulate(sim, spec) # '0:30,15 3:00,25 9:00,25 10:30,5 13:30,5 14:00,0')


